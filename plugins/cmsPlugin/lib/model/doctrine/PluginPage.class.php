<?php

/**
 * PluginPage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginPage extends BasePage
{
	
	public function getVisibleContents() {
		$users = 'tots';
		$sf_user = sfContext::getInstance()->getUser();
		if ($sf_user->isAuthenticated()) {
			$guard_user = $sf_user->getGuardUser();
			if ($guard_user->hasGroup('llista')) $users = 'llista';
		}
		return PageContentTable::getVisible($this->id, $users);
	}
	public function getParentSlug() {
		return $this->Parent->slug;
	}
	public function getApartat() {
		$p = $this;
		$i=0;
		while ($p->Parent->id && $i<10) {
			$p = $p->Parent;
			$i++;
		}
		return $p;
	}
	public function getSubApartat() {
		$p = $this;
		$i=0;
		while ($p->Parent->id && $p->Parent->Parent->id && $i<10) {
			$p = $p->Parent;
			$i++;
		}
		return $p;
	}
	public function getApartatSlug() {
		return $this->getApartat()->slug;
	}
	public function getParentParentSlug() {
		return $this->Parent->Parent->slug;
	}
	public function getUrl() {
		$routeName = false;
		switch($this->id) {
			case 45:
			case 46:
			case 49:
			case 61:
			case 72:
			case 120:
				$routeName = 'espectacles'; $params = array('slug'=>$this->slug); $application='Frontend'; break;
			default:
				$routeName = 'espectacles_fitxa'; 
				$params = array('apartat_slug'=>$this->getApartatSlug(),'slug'=>$this->slug);
				$application='Frontend'; break;
		}
		if (!$routeName) return '';
		$fnc = 'generate'.$application.'Url';
		return sfProjectConfiguration::getActive()->$fnc($routeName,$params);
	}
	
	public function getSubmenu() {
		return PageTable::getSubmenu($this->id);		
	}

	public function canDelete() {
		return $this->parent_id!=null;
	}
	public function canEditTitle() {
		return $this->parent_id!=null;
	}
	public function canEditVisible() {
		return $this->parent_id!=null;
	}

    public function preDelete($event)
    {
		foreach($this->getContents() as $content) {
			$content->preDelete($event);
		}
		$path = sfConfig::get('app_path_images_llistat');
        $arxiu = sfConfig::get('sf_web_dir').$path.$this->getImage();
        if (file_exists($arxiu)) { @unlink($arxiu);  }
		parent::preDelete($event);
	}
	
	public function __toString() {
		return $this->titre;
	}
	
}